#version 430

in vec3 origin, direction;
out vec4 outputColor;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 reflection;
	vec3 specular;
	vec3 transparency;
	vec3 emission;
	vec3 atenuation;
	float refractionCoef;
	float shiness;
};

struct Sphere
{
	vec3 position;
	float radius;
	//vec3 color;
	Material material;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
	int type;
};

struct RayNode
{
	Ray ray;
	//vec3 color;
	vec3 reflectionColor;
	vec3 refractionColor;
	vec3 diffuseColor;
	vec3 specular;
	vec3 reflection;
	vec3 refraction;
	int parentIndex;
	int depth;
};

struct HitInfo
{
	bool hitDetected;
    vec3 hitPoint;
    vec3 surfaceNormal;
    float distance;
	vec3 color;
};

const int Max_Depth = 5;
const int Max_Nodes = 64;
RayNode rayNode[Max_Nodes];
const int sphereCount = 3;
Sphere spheres[sphereCount];
const int TYPE_DIFFUSE = 1;
const int TYPE_SHADOW = 2;
const int TYPE_REFLECTION = 3;
const int TYPE_TRANSPARENCY = 4;

void sphereIntersect(Ray ray, Sphere sphere, inout HitInfo hitInfo)
{
	vec3 trackToSphere = ray.origin - sphere.position;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(trackToSphere, ray.direction);
    float c = dot(trackToSphere, trackToSphere) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;

	if(discriminant > 0)
	{
		float distance = (-b - sqrt(discriminant)) / (2.0 * a);
		if(distance > 0.0001 && (distance < hitInfo.distance && hitInfo.hitDetected || !hitInfo.hitDetected))
		{
			hitInfo.distance = distance;
			hitInfo.hitPoint = ray.origin + ray.direction *  hitInfo.distance;
  			hitInfo.surfaceNormal = normalize(hitInfo.hitPoint - sphere.position);
			hitInfo.hitDetected = true;
			hitInfo.color = sphere.color;
		}
	}
}

vec3 iterativeRayTrace(Ray ray)
{
	Sphere sphere;
	sphere.position = vec3(0.0, 0.0, 0.0);
	sphere.radius = 0.5;
	sphere.color = vec3(0.9, 0.3, 0.0);
	spheres[0] = sphere;

	sphere.position = vec3(-1.5, 0.0, 0.0);
	sphere.radius = 0.2;
	sphere.color = vec3(0.0, 0.3, 0.7);
	spheres[1] = sphere;

	sphere.position = vec3(-0.6, 0.3, 0.0);
	sphere.radius = 0.3;
	sphere.color = vec3(0.5, 0.8, 0.4);
	spheres[2] = sphere;

	int numberOfNodes = 1, currentNodeIndex = 0;

	rayNode[currentNodeIndex].ray = ray;
    rayNode[currentNodeIndex].depth = 0;

	while(currentNodeIndex < numberOfNodes)
	{
		HitInfo hitInfo;
		hitInfo.hitDetected = false;
		sphereIntersect(ray, spheres[0], hitInfo);
		sphereIntersect(ray, spheres[1], hitInfo);
		sphereIntersect(ray, spheres[2], hitInfo);

		if(hitInfo.hitDetected)
		{
			float coeff = (dot(ray.direction, hitInfo.surfaceNormal) * dot(ray.direction, hitInfo.surfaceNormal)) / (dot(ray.direction, ray.direction) * dot(hitInfo.surfaceNormal, hitInfo.surfaceNormal));
			
			rayNode[currentNodeIndex].color = hitInfo.color * coeff;
		}
		else
		{
			break;
			/*rayNode[currentNodeIndex].color = vec3(0, 0, 0);*/
		}

		currentNodeIndex++;
	}
	return rayNode[0].color;
}

void main()
{
	Ray ray = Ray(origin, direction);
	outputColor = vec4(iterativeRayTrace(ray), 1.0);
}
